name: 'OQuaRE metrics calculation module'
description: 'Calculates the metrics of ontology files in the given folder based on the metrics set by the OQuaRE framework'
inputs:
  ontology-folder:
    description: 'Folder which contains .owl files'
    required: true
    default: 'ontologies'
  contents-folder:
    description: 'Folder which will contain results and archives'
    default: 'OQuaRE'
  reasoner:
    description: 'Reasoner used by OQuaRE framework'
    required: true
    default: 'ELK'
  category-plots:
    description: 'Indicates if you want category values plots'
    default: 'true'
  model-plot:
    description: 'Indicates if you want oquare model value plots'
    default: 'true'
  archive-plot:
    description: 'Indicates if you want oquare model value plot across the latest 20 versions'
    default: 'false'


runs: 
  using: 'composite'
  steps:
    - uses: actions/checkout@v2
      with:
          fetch-depth: 2
    - uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '8'
    - uses: actions/setup-python@v3
      with:
        python-version: '3.9'
        cache: 'pip'
    - run: pip install -r requirements.txt
      shell: bash

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v18
      with:
        files: |
          ${{ inputs.ontology-folder }}/*.owl
      
    - name: Setup folders
      run: |
        mkdir -p ${{ inputs.contents-folder }} && mkdir -p ${{ inputs.contents-folder }}/results && mkdir -p ${{ inputs.contents-folder }}/archives \
        && mkdir -p ${{ inputs.contents-folder }}/temp_results
      shell: bash
    
    - name: Find and copy previous results
      if: steps.changed-files.outputs.any_changed == 'true'
      run: cp -r $(find ${{ inputs.contents-folder }}/results/* -maxdepth 0)/* ${{ inputs.contents-folder }}/temp_results
      shell: bash

    - name: Removes previous run plots 
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        rm -f ${{ inputs.contents-folder }}/temp_results/OQuaRE_model_values_global.png
        rm -f ${{ inputs.contents-folder }}/temp_results/OQuaRE_model_values.png
        rm -f ${{ inputs.contents-folder }}/temp_results/README.md
      shell: bash

    - name: If file renamed, delete nonmatching folders on temporal folder
      if: steps.changed-files.outputs.renamed_files
      run: |
        comm -13 <(ls -1 ${{ inputs.ontology-folder }} | sed s/.owl//g) <( ls -1 ${{ inputs.contents-folder}}/temp_results) | \
        while read file; do \
          rm -r ${{ inputs.contents-folder}}/temp_results/${file};
        done
      shell: bash

    - name: Checks if its the first run (results empty folder)
      run: |
        if [ -z "$(ls -A ./${{ inputs.contents-folder }}/results)" ]; then \
          find ./${{ inputs.ontology-folder }} -type f -maxdepth 1 -name "*.owl" | while read file; do \
            outputFile=$(basename "$file" .owl); 
            mkdir -p ${{ inputs.contents-folder }}/temp_results/${outputFile}/metrics; \
            outputFilePath="${{ inputs.contents-folder }}/temp_results/${outputFile}/metrics/${outputFile}.xml"; \
            java -jar libs/oquare-versions.jar --ontology "$file" --reasoner "${{ inputs.reasoner }}" --outputFile "$outputFilePath"; \
            
            if [ ${{ inputs.category-plots }} = "true" ]; then \
              python scripts/main.py -i ${{ inputs.contents-folder }} -c -f "$outputFile"; \
            fi
          done

          python scripts/main.py -i ${{ inputs.contents-folder }} -m

          mv ${{ inputs.contents-folder }}/temp_results ${{ inputs.contents-folder }}/results/"$(date +%d-%m-%Y_%H-%M-%S)"
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add ${{ inputs.contents-folder }}/
          git commit -m "Ontology metrics calculated - OQuaRE"
          git push
        fi
      shell: bash

    - name: Call oquare library
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do \
          outputFile=$(basename "$file" .owl); \
          mkdir -p ${{ inputs.contents-folder }}/temp_results/${outputFile}/metrics; \
          outputFilePath="${{ inputs.contents-folder }}/temp_results/${outputFile}/metrics/${outputFile}.xml"; \
          rm -f "$outputFilePath"; \
          rm -f "${{ inputs.contents-folder}}/temp_results/${outputFile}/README.md"
          java -jar libs/oquare-versions.jar --ontology "$file" --reasoner "${{ inputs.reasoner }}" --outputFile "$outputFilePath"; \
          if [ ${{ inputs.category-plots }} = "true" ]; then \
            python scripts/main.py -i ${{ inputs.contents-folder }} -c -f "$outputFile"; \
          fi
        done
      shell: bash
    
    - name: 'Evaluate and plot oquare model value'
      if: inputs.model-plot == 'true' && steps.changed-files.outputs.any_changed == 'true'
      run: python scripts/main.py -i ${{ inputs.contents-folder }} -m
      shell: bash
      
    - name: Archive previous results
      if: steps.changed-files.outputs.any_changed == 'true'
      run: mv -v ${{ inputs.contents-folder }}/results/* ${{ inputs.contents-folder }}/archives/ 
      shell: bash

    - name: Move results to results folder and tag it with a date
      if: steps.changed-files.outputs.any_changed == 'true'
      run: mv ${{ inputs.contents-folder }}/temp_results ${{ inputs.contents-folder }}/results/"$(date +%Y-%m-%d_%H-%M-%S)"
      shell: bash

    - name: 'Evaluate and plot historic'
      if: inputs.archive-plot == 'true' && steps.changed-files.outputs.any_changed == 'true'
      run: python scripts/main.py -i ${{ inputs.contents-folder }} -g
      shell: bash
      
      
    - name: Commit and push
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add ${{ inputs.contents-folder }}/
        git commit -m "Ontology metrics calculated - OQuaRE"
        git push
      shell: bash


      
