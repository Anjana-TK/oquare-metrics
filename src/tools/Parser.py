import xml.etree.ElementTree as ET

class MetricsParser:

    """XML Parser class to extract metrics data from an ontology

    This class responsability lies on parsing an xml file which holds all the metrics
    generated by the OQuaRE library. This class provides functionality to extract
    certain metrics from a given file.

    """

    def __init__(self, metrics_file: str):
        """MetricsParser init method

        Stores as fields the XML tree aswell as the root node of said tree.
        This allows for easy XML file parsing on its class methods

        Keyword arguments:
        metrics_file -- Path to xml file which holds the generated metrics of a given ontology
        """
        self.tree = ET.parse(metrics_file)
        self.root = self.tree.getroot()

    def parse_oquare_value(self) -> float:
        """OQuaRE model value parse method
        
        Returns a float value which represents the oquare model metric value

        """
        oquare_value = float("{:.2f}".format(self.root.find('oquareModel').attrib.get('oquareValue')))
        return oquare_value
    
    def parse_scaled_metrics(self) -> dict:
        """OQuaRE scaled metrics parse method
        
        Returns a dictionary which holds the scaled value for each OQuaRE metric

        """
        scaled_metrics = self.root.findall('./oquareMetricsScaled/')
        metrics_dict = {}
        for metric in scaled_metrics:
            metrics_dict[metric.tag] = float("{:.2f}".format(metric.text))
        
        return metrics_dict
    
    def parse_metrics(self):
        """OQuaRE metrics parse method
        
        Returns a dictionary which holds the value for each OQuaRE metric

        """
        metrics = self.root.findall('./oquareMetrics/')
        metrics_dict = {}
        for metric in metrics:
            metrics_dict[metric.tag] = float("{:.2f}".format(metric.text))

        return metrics_dict

    def parse_category_metrics(self):
        """OQuaRE category parse method
        
        Returns a dictionary which holds the value aswell as the subcategories and their values
        of each category of metrics.

        The dictionary is structured as it follows
        category:
            value: float
            subcategories
                subcategory: float

        """
        oquare_model = self.root.findall('oquareModel/')
        oquare_model_dict = {}
        for metric in oquare_model:
            metric_name, metric_value = next(iter(metric.attrib.items()))

            oquare_category = {}
            oquare_category['value'] = float("{:.2f}".format(metric_value))
            
            oquare_sub_categories = {}
            
            # Get subcategories
            subcategories = self.root.findall('oquareModel/' + metric.tag + '/')
            for subcategory in subcategories:
                oquare_sub_categories[subcategory.tag] = float("{:.2f}".format(subcategory.text))

            # Put subcategories under the main category
            oquare_category['subcategories'] = oquare_sub_categories

            # Put each category inside the oquare_model_dict
            oquare_model_dict[metric_name] = oquare_category

        return oquare_model_dict
