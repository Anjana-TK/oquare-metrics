import math
import xml.etree.ElementTree as ET

class MetricsParser:

    """XML Parser class to extract metrics data from an ontology

    This class responsability lies on parsing an xml file which holds all the metrics
    generated by the OQuaRE library. This class provides functionality to extract
    certain metrics from a given file.

    """

    def __init__(self, metrics_file: str):
        """MetricsParser init method

        Stores as fields the XML tree aswell as the root node of said tree.
        This allows for easy XML file parsing on its class methods

        Keyword arguments:
        metrics_file -- Path to xml file which holds the generated metrics of a given ontology
        """
        self.tree = ET.parse(metrics_file)
        self.root = self.tree.getroot()

    def parse_oquare_value(self) -> float:
        """OQuaRE model value parse method
        
        Returns a float value which represents the oquare model metric value

        """
        oquare_value = math.floor(float(self.root.find('oquareModel').attrib.get('oquareValue')) * 10 ** 2) / 10 ** 2  
        return oquare_value
    
    def parse_scaled_metrics(self) -> dict:
        """OQuaRE scaled metrics parse method
        
        Returns a dictionary which holds the scaled value for each OQuaRE metric

        """
        scaled_metrics = self.root.findall('./oquareMetricsScaled/')
        metrics_dict = {}
        for metric in scaled_metrics:
            metrics_dict[metric.tag] = math.floor(float(metric.text) * 10 ** 2) / 10 ** 2  
        
        return metrics_dict
    
    def parse_metrics(self):
        """OQuaRE metrics parse method
        
        Returns a dictionary which holds the value for each OQuaRE metric

        """
        metrics = self.root.findall('./oquareMetrics/')
        metrics_dict = {}
        for metric in metrics:
            metrics_dict[metric.tag] = math.floor(float(metric.text) * 10 ** 2) / 10 ** 2   

        return metrics_dict

    def parse_features_metrics(self):
        """OQuaRE features parse method
        
        Returns a dictionary which holds the values aswell as the subfeatures and their values
        of each feature.

        The dictionary is structured as it follows
        feature:
            value: float
            subfeatures
                subfeatures: float

        """
        oquare_model = self.root.findall('oquareModel/')
        oquare_model_dict = {}
        for feature in oquare_model:
            feature_name, feature_value = next(iter(feature.attrib.items()))

            oquare_feature = {}
            oquare_feature['value'] = math.floor(float(feature_value) * 10 ** 2) / 10 ** 2  
            
            oquare_sub_features = {}
            
            # Get subfeatures
            subfeatures = self.root.findall('oquareModel/' + feature.tag + '/')
            for subfeature in subfeatures:
                oquare_sub_features[subfeature.tag] = math.floor(float(subfeature.text) * 10 ** 2) / 10 ** 2  

            # Put subfeatures under the main features
            oquare_feature['subfeatures'] = oquare_sub_features

            # Put each features inside the oquare_model_dict
            oquare_model_dict[feature_name] = oquare_feature

        return oquare_model_dict
